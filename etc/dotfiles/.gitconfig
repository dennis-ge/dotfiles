[alias]

    a   = commit --amend
    br  = branch
    c   = commit -m
    ca  = !git add -A && git commit -m 
    co  = checkout
    cp  = cherry-pick
    d   = diff -- . ':!*package-lock.json' ':!*yarn.lock'
    dc  = diff --cached -- . ':!*package-lock.json' ':!*yarn.lock'
    f   = fetch
    g   = log --graph --pretty=custom           # Show custom graph.
    git = !exec git                             # Allow `$ git git git...`
    l   = log --pretty=custom                   # Show custom log.
    lc  = shortlog --email --numbered --summary # List contributors.
    p   = push
    r   = rebase
    s   = status
    w   = instaweb --httpd=webrick              # Start web-based visualizer.

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Find commits by source code.

    cc = "!f() { \
        git log --pretty=custom --decorate --date=short -S\"$1\"; \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Find commits by commit message.

    cm = "!f() { \
        git log --pretty=custom --decorate --date=short --grep=\"$1\"; \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Credit an author on the latest commit.

    credit = "!f() { \
        if [ -n \"$1\" ] && [ -n \"$2\" ]; then \
            git commit --amend --author \"$1 <$2>\" -C HEAD; \
        fi \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Credit a co-author on the latest commit.
    #
    # https://help.github.com/en/articles/creating-a-commit-with-multiple-authors
    # https://help.github.com/en/articles/creating-a-commit-on-behalf-of-an-organization

    credit-co-author = "!f() { \
        if [ -n \"$1\" ] && [ -n \"$2\" ]; then \
            GIT_EDITOR=\"git interpret-trailers --in-place --trailer='Co-authored-by: $1 <$2>'\" git commit --amend; \
        fi \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # overwrite global user
    identity = "! git config user.name \"$(git config user.$1.name)\"; git config user.email \"$(git config user.$1.email)\"; git config user.signingkey \"$(git config user.$1.signingkey)\"; :"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # List remote branches.

    lrb = "!f() { \
        remote="${1:-origin}"; \
        git ls-remote --heads "$remote"; \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Remove the tag with the specified tag name if
    # exists and tag the latest commit with that name.

    retag = "!f() { \
        git tag -d "$1" &> /dev/null; \
        git tag $1; \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Remove last commits (by default it removes the last commit).

    rlc = "!f() { \
        declare n=\"${1:-1}\"; \
        git reset --hard \"HEAD~$n\"; \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Undo last commits (by default it undoes the last commit).

    ulc = "!f() { \
        declare n=\"${1:-1}\"; \
        git reset --soft \"HEAD~$n\"; \
    }; f"
	
    alias = ! git config --get-regexp ^alias\\. | sed -e s/^alias\\.// -e s/\\ /\\ =\\ /
[color "branch"]

    current = green
    local = blue
    remote = yellow

[color "diff"]

    frag = magenta
    meta = yellow

    new = green
    old = red

    newMoved = cyan
    oldMoved = blue

[color "status"]

    added = white yellow
    updated = white green
    changed = white red
    untracked = white blue

[commit]
	gpgsign = true

[core]

    abbrev = 12
    attributesFile = ~/.gitattributes
    autocrlf = input
    editor = vim
    excludesFile = ~/.gitignore
    pager = delta
    compression = 0

[delta]
    features = mantis-shrimp-lite
    side-by-side = true
    line-numbers = true
    navigate = true

[diff]
    colorMoved = default

[diff "bin"]

    # Use `hexdump` to diff binary files.

    textconv = hexdump -v -C

[gpg]
	program = gpg

[init]

    defaultBranch = main

[merge]
    conflictstyle = diff3

[pretty]

    custom = "%C(magenta)%h%C(red)%d %C(yellow)%ar %C(green)%s %C(yellow)(%an)"
    #                     │        │            │            │             └─ author name
    #                     │        │            │            └─ message
    #                     │        │            └─ date (relative)
    #                     │        └─ decorations (branch, heads or tags)
    #                     └─ hash (abbreviated)

[pull]
    # https://stackoverflow.com/questions/2472254/when-should-i-use-git-pull-rebase
	rebase = true

[push]

    # Make `git push` automatically push relevant
    # annotated tags when pushing branches out.

    followTags = true

[user]

    # Do not guess the user's identity.
    # https://github.com/git/git/blob/90f7b16b3adc78d4bbabbd426fb69aa78c714f71/Documentation/config.txt#L2847-L2855

    useConfigOnly = true
    # [!] DO NOT store sensitive information such as the Git user
    # credentials (`name` / `email`), or things such as the `signingkey`
    # in this file, add them in `~/.gitconfig.local`!
    #
    # See also: https://github.com/alrra/dotfiles#gitconfiglocal

[include]

    # Load local configs.
    # https://git-scm.com/docs/git-config#_includes
    #
    # [!] The following needs to remain at the end of this file in
    #     order to allow any of the above configs to be overwritten
    #     by the local ones

    path = ~/.gitconfig.local
    path = ~/.themes.gitconfig

[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
