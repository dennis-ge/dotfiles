#!/usr/bin/env bash

# Helper Functions
function new_separator() {
  printf "%0.s-" {1..50}
  printf "\n"
}

function new_small_separator() {
	printf "%0.s-" {1..25}
	printf "\n"
}

function echo_header() {
  tput setaf 1; echo -e "\033[46m $1 \033[0m"; tput sgr0
}

function echo_message() {
  tput setaf 2; echo $1; tput sgr0
}

function echo_error() {
  tput setaf 1; echo $1; tput sgr0
}

# checks if the Ubuntu Desktop libaries are installed
function is_ubuntu_desktop() {
  dpkg -l ubuntu-desktop >/dev/null 2>&1 || return 1
}

function is_wsl_1() {
  uname -a | grep -q Microsoft || return 1
}

function is_wsl_2() {
  uname -a | grep -q microsoft || return 1
}

function is_macos() {
  uname -a | grep -q Darwin || return 1
}

function to_lower_case() {
    local string=$1
    echo "${string,,}"
}

function check_successful() {
  if [ $? = 0 ]; then
    echo_message "$2 successfully installed"
    new_small_separator
  else
    echo_error "$2 installation failed"
  fi
}

# Downloads a package, repo, etc. in a given directory.
# If the directory already exists, the process is skipped.
# Parameters: 
#   1: Name of package, repo
#   2: directory to check
#   3: command to execute for downloading
function download_in_dir() {
  if [[ -d $2 ]]; then
    echo_message "$1 already downloaded"
  else
    echo_message "Downloading $1"
    $3
    check_successful $? $1
  fi
}

append_to_local_if_not_present() {
  local file=~/.bashrc.local
  local line=$1
  if grep -q $file -e "$line"; then
    echo_message "Skipping appending '$line' to $file"
  else
    echo_message "Appending '$line' to $file"
    echo $line >> $file
  fi
}


export -f new_small_separator
export -f echo_message
export -f echo_error
export -f is_ubuntu_desktop
export -f is_wsl_1
export -f is_wsl_2
export -f is_macos
export -f check_successful
export -f download_in_dir
export -f to_lower_case
export -f append_to_local_if_not_present

declare -A ALL_OPTIONS 
ALL_OPTIONS["system"]="Basic System Installation"
ALL_OPTIONS["dotfiles"]="Link dotfiles to home directory"
ALL_OPTIONS["docker"]="Install Docker"
ALL_OPTIONS["docker-compose"]="Install Docker-Compose"
ALL_OPTIONS["go"]="Install Go"
ALL_OPTIONS["favorite-apps"]="Update your Favorite Apps (only Desktop Version)"
ALL_OPTIONS["ide"]="Install some Jetbrains IDE (only Desktop Version)"
ALL_OPTIONS["vscode"]="Install VSCode with some extensions (only Desktop Version)"
ALL_OPTIONS["github-cli"]="Install the GitHub CLI"
ALL_OPTIONS["k8s"]="Install Kubernetes related tools"

show_help() {
  echo "Usage: $(basename $0)  [options]"
  echo ""
  echo "Options:"
  for option in "${!ALL_OPTIONS[@]}"; do
    printf "%5s %-20s %s \n" "" $option	"${ALL_OPTIONS[$option]}"
  done

}

install_option() {
  option=$1
  new_separator
  echo_header "Starting ${option}"
  chmod +x "./install/$option-install.sh"
  if [ $? = 127 ]; then
    echo_error "'$option' is an unknown command"
    echo ""
    show_help
    exit 1
  else 
    "./install/$option-install.sh"
    echo_message "Finished $option"
  fi
}

install_all() {
  echo_message "Installing All Options"
  for option in "${!ALL_OPTIONS[@]}"; do
    install_option $option
  done
}


case "$1" in 
  "" | "-h" | "--help")   show_help  ;;
  "all")                  install_all ;;
  *)
    for option in "$@"
    do
      install_option $option
    done
    ;;
esac
